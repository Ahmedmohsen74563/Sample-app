explain in detail : trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

stages:

# =========================
# STAGE 1: Build APK
# =========================
- stage: Build
  jobs:
    - job: BuildAPK
      steps:
        - task: FlutterInstall@0
          inputs:
            mode: 'auto'
            channel: 'stable'
            version: 'latest'

        - script: |
            echo "Setting compileSdkVersion to 34 in android/app/build.gradle..."
            sed -i 's/compileSdkVersion .*/compileSdkVersion 34/' android/app/build.gradle
            grep "compileSdkVersion" android/app/build.gradle || exit 1
          displayName: 'Fix compileSdkVersion'

        - script: |
            export PATH="$FLUTTER_HOME/bin:$PATH"
            flutter --version
            flutter pub get
          displayName: 'Setup Flutter & Run Diagnostics'

        - task: FlutterBuild@0
          inputs:
            target: 'apk'
            projectDirectory: '.'

        - task: CopyFiles@2
          inputs:
            SourceFolder: 'build/app/outputs/flutter-apk/'
            Contents: '*.apk'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'release-apk'
            publishLocation: 'Container'

# =========================
# STAGE 2: Deploy to Firebase
# =========================
- stage: Deploy
  dependsOn: Build
  jobs:
    - job: FirebaseDeploy
      steps:
        - task: DownloadSecureFile@1
          name: downloadFirebaseKey
          inputs:
            secureFile: 'firebase-service-account.json'

        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'release-apk'
            downloadPath: '$(Pipeline.Workspace)'

        - script: |
            npm install -g firebase-tools
            # Set the GOOGLE_APPLICATION_CREDENTIALS environment variable to the downloaded service account file
            export GOOGLE_APPLICATION_CREDENTIALS="$(downloadFirebaseKey.secureFilePath)"
            
            # Deploy the APK to Firebase App Distribution
            firebase appdistribution:distribute \
              "$(Pipeline.Workspace)/release-apk/app-release.apk" \
              --app "$(FIREBASE_APP_ID)"
          env:
            GOOGLE_APPLICATION_CREDENTIALS: "$(downloadFirebaseKey.secureFilePath)"  # For other Firebase tools
          displayName: 'Deploy to Firebase'